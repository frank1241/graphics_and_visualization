class Asteroid{
  float initx,inity,x,y;
  float velx;
  float radius;
  boolean isCollided=false;
  Asteroid(float x,float y,float velx,float radius){
    this.initx = x;
    this.inity = y;
    this.x = x;
    this.y = y;
    this.velx = velx;
    this.radius = radius;
  }/*
  void detectShipCollision(Spaceship other){
    float distance = sqrt(sq(other.x-this.x) + sq(other.y-this.y));
    if(distance < (this.radius+other.radius)){
      this.isCollided = true;
      other.isCollided = true;
    }
  }
  void detectBulletCollision(Projectile other){
    float distance = sqrt(sq(other.x-this.x) + sq(other.y-this.y));
    if(distance < (this.radius+other.radius)){
      this.isCollided = true;
      other.isCollided = true;
    }    
  }
  */
  void move(){
    this.x = this.x + this.velx;
    if(this.x <= 0){
      this.x = this.initx;
    }
  }
  void display(){
    fill(255);
    ellipse(this.x,this.y,this.radius,this.radius);
    this.move();
  }
}


int globalTimer;
int gameScore;
int levelAmount=5;
Asteroid[] level;
void setup(){
  size(1800,1000);
  background(0);
  levelFill();
}
void draw(){
  background(0);
  fill(#FC910D);
  rect(0,750,1800,50);
  for(Asteroid as:level){
    as.display();
  }
  globalTimer++;
}
void levelFill(){
  float randy,randvelx,randius;
  level = new Asteroid[levelAmount];
  for(int i=0;i<levelAmount;i++){
    randy = random(50,700);
    randvelx = random(1,10);
    randius = random(30,150);
    level[i] = new Asteroid(width,randy,-randvelx,randius);
  }
  levelAmount+=5;
}
